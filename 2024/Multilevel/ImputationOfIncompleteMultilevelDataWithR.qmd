---
title: "Imputation of Incomplete Multilevel Data with `R`"
author: "Hanne Oberman"
institute: "PhD candidate at Utrecht University"
format:
  revealjs:
    logo: logo.png
    footer: "Hanne Oberman, hanneoberman.github.io/presentations"
    incremental: true
    toc: false
    toc-title: Overview
css: style.css
---

```{r setup}
library(knitr)
library(ggplot2)
```

## Incomplete multilevel data

<br><br>

:::{.r-stack}

$$
\text{multilevel structure } \times \text{ missing data }
$$

:::

<!-- 1. missing data occur often in data with human subjects -->
<!-- 2. missing data may be resolved, but need to be handled in accordance with the analysis of scientific interest -->
<!-- 3. in human-subjects research, there is often clustering, which may be captured with multilevel modeling techniques -->
<!-- 4. if the analysis of scientific interest is a multilevel model, the missing data handling method should accommodate the multilevel structure of the data -->
<!-- 4. both missingness and multilevel structures require advanced statistical techniques -->
<!-- 5. this tutorial sets out to facilitate empirical researchers in accommodating both multilevel structures as well as missing data. -->
<!-- 6. we illustrate the use of the software by means of three case studies from the social and biomedical sciences. -->

## Missingness

```{r}
dat <- expand.grid(rows = 1:7, cols = 1:6) |>
  cbind(
    text = c("1", "1", "2", "2", "3", "", "N", rep("", 35)),
    miss = c(rep("", 16), "NA", "NA", "", "", "", "NA", "", "", "NA", rep("", 17))
  )
ggplot(dat, aes(x = cols, y = rows, fill = ifelse(miss == "NA", "#B61A51B3", "#006CC2B3"))) +
  geom_tile(color = "black",
            alpha = 0.6,
            linewidth = 0.5) +
  geom_text(aes(label = text), color = "black", size = 3, fontface = "bold") +
  geom_text(
    aes(label = miss),
    color = "black",
    family = "mono",
    fontface = "bold"
  ) +
  scale_x_continuous(
    breaks = 1:6,
    labels = c(
      "cluster",
      expression(X[1]),
      expression(X[2]),
      expression(X[3]),
      "...",
      expression(X[p])
    ),
    name = NULL,
    position = "top"
  ) +
  scale_y_continuous(
    breaks = 1:7,
    labels = c(1:5, "...", "n"),
    name = NULL,
    trans = "reverse"
  ) +
  scale_fill_identity() +
  # coord_cartesian(expand = c(0,0)) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        plot.margin = unit(c(0, 0, 0, 0), "pt"))
```

## Missing data methods

- Prevention
- Ad-hoc methods, e.g., single imputation, list-wise deletion
- Weighting methods
- Likelihood methods, EM-algorithm
- Multiple imputation

## Multiple imputation

- Works with item non-response
- Does not assume MCAR
- Does not over-complicate the analysis model

<!-- Splits missing data problem from complete-data analysis -->

## Ingredients

- Incomplete data
- Assumed missingness mechanism
- Known analysis model

## Case study (Hox et al., 2018)

<!-- The most general analytic model to be applied to imputed data (Hox et al., 2018, p. 17, equation 2.12). -->

<br><br>

::: {.smaller}
\begin{align}
\text{popularity}_{ij} = &\gamma_{00}+ \gamma_{10} \text{gender}_{ij} + \gamma_{20} \text{extraversion}_{ij} + \\
&\gamma_{01} \text{experience}_j + \gamma_{21} \text{extraversion}_{ij} \times \text{experience}_j + \\
&u_{2j} \text{extraversion}_{ij} + u_{0j}+ e_{ij} 
\end{align}
:::



## Setup

```{r, echo=FALSE}
load("./popular_MAR.RData")
dat <- popular_MAR
rm(popular_MAR)
```

<!-- Setup `R` environment -->
```{r, message=FALSE, warning=FALSE, echo=TRUE}
set.seed(123)         # for reproducibility
library(mice)         # for imputation
library(miceadds)     # for imputation
library(ggmice)       # for visualization
library(ggplot2)      # for visualization
library(dplyr)        # for data wrangling
library(lme4)         # for multilevel modeling
library(broom)        # for tidying model output
library(broom.mixed)  # for tidying model output
str(dat)
```


## Missing data pattern

```{r, echo=TRUE}
plot_pattern(dat, square = FALSE)
```

<!-- The unit identifier and cluster identifier are observed for all cases. All other variables are incomplete. The outcome variable 'popularity' is missing for `r sum(is.na(dat$popularity_ij))` cases. The cluster-level variable 'teacher experience' is missing only once. The unit-level variables 'gender', 'extraversion' and 'teacher assessment' are missing for `r sum(is.na(dat$gender_ij))`, `r sum(is.na(dat$extraversion_ij))` and `r sum(is.na(dat$assessment_ij))` cases, respectively.  -->

<!-- Teacher assessment is not part of the analysis model, but may serve as auxiliary variable in the imputation models. This is advisable if the observed data in the teacher assessment variable is strongly related to the observed data in the incomplete variables *or* their missingness indicators (see below).   -->

## Imputation model building

```{r, echo=TRUE}
plot_corr(dat, square = FALSE)
```

<!-- The auxiliary variable 'teacher assessment' may be useful in the imputation for the incomplete outcome variable 'popularity'. The unit identifier is not relevant, and will be left out of the imputation models. -->

<!-- For each incomplete variable we need to define an imputation model: 1) choose the functional form of the imputation model and 2) select the imputation model predictors.  -->

## Default imputation methods

<!-- Create the default methods vector, to be filled in with the appropriate imputation methods.  -->
```{r, echo=TRUE}
meth <- make.method(dat)
meth
```

<!-- The complete identifier variables do not have to be imputed. The default imputation methods for the incomplete variables are not appropriate because of the multilevel structure of the data. We will fill in the methods vector with more appropriate imputation methods, based on the distribution of the incomplete variables.  -->

<!-- The outcome variable 'popularity' is approximately normally distributed.  -->

## Outcome variable: popularity

```{r}
# ggmice(dat, aes(popularity_ij)) + 
#   geom_histogram(fill = "white")
```

<!-- A density plot of the incomplete outcome variable 'popularity' shows that aggregated across clusters, the distribution is approximately normal. Within clusters, there is more variability. -->

```{r, echo=TRUE}
ggmice(dat, aes(popularity_ij, group = cluster_id)) + 
  geom_density()
```


```{r, echo=TRUE}
meth["popularity_ij"] <- "2l.norm"
```

## Unit-level variable: gender

```{r, echo=TRUE}
ggmice(dat, aes(as.factor(gender_ij))) + 
  geom_bar(position = "stack", fill = "white")
```


```{r, echo=TRUE}
meth["gender_ij"] <- "2l.bin"
```


## Unit-level variable: extraversion

```{r, echo=TRUE}
ggmice(dat, aes(extraversion_ij)) + 
  geom_histogram(fill = "white")
```


```{r, echo=TRUE}
meth["extraversion_ij"] <- "2l.pmm"
```

## Auxiliary variable: teacher assessment

```{r, echo=TRUE}
ggmice(dat, aes(assessment_ij)) + 
  geom_histogram(fill = "white")
```


```{r, echo=TRUE}
meth["assessment_ij"] <- "2l.pmm"
```

## Cluster-level variable: teacher experience

```{r, echo=TRUE}
ggmice(dat, aes(experience_j)) + 
  geom_histogram(fill = "white")
```


```{r, echo=TRUE}
meth["experience_j"] <- "2lonly.pmm"
```

## Cross-level interaction: pupil extraversion $\times$ teacher experience

```{r, echo=TRUE}
dat$interaction <- NA
meth["interaction"] <- "~ I(extraversion_ij * experience_j)"
meth
```


## Default predictor matrix

```{r, echo=TRUE}
pred <- quickpred(dat)
plot_pred(pred, method = meth, square = FALSE)
```

## Outcome variable: popularity

```{r, echo=TRUE}
# clustering variable
pred["popularity_ij", "cluster_id"] <- -2
# fixed effect for gender, random effect for extraversion
pred["popularity_ij", "gender_ij"] <- 1
pred["popularity_ij", "extraversion_ij"] <- 2
# add disaggregated cluster means
pred["popularity_ij", "gender_ij"] <- 3
pred["popularity_ij", "extraversion_ij"] <- 4
# cluster-level variable
pred["popularity_ij", "experience_j"] <- 1
# interaction term
pred["popularity_ij", "interaction"] <- 1
# auxiliary variable
pred["popularity_ij", "assessment_ij"] <- 1
```

## Predictor variables

```{r, echo=TRUE}
# clustering variable
pred[, "cluster_id"] <- -2
# outcome variable
pred[, "popularity_ij"] <- 1
# clean up predictor matrix
pred[, "interaction"] <- 0
pred[, "unit_id"] <- 0
diag(pred) <- 0
```

## Predictor matrix

```{r, echo=TRUE}
plot_pred(pred, method = meth, square = FALSE)
```

## Impute the data

```{r, eval=FALSE, echo=TRUE}
imp <- mice(
  dat, 
  m = 1, 
  method = meth, 
  predictorMatrix = pred,
  maxit = 1)
```


::: {.callout-warning}

## Error

```
iter imp variable
  1   1  popularity_ij  gender_ij  extraversion_ij  experience_jError in .imputation.level2(y = y, ry = ry, x = x, type = type, wy = wy,  : 
  Method 2lonly.pmm found the following clusters with partially missing
  level-2 data: 1
  Method 2lonly.mean can fix such inconsistencies.
In addition: Warning message:
In mice.impute.2l.bin(y = c(2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,  :
  glmer does not run. Simplify imputation model
```
:::

```{r}
# dat |>
#   group_by(cluster_id) |>
#   reframe(teacher_experience = unique(experience_j))
```

## Edit the methods and re-impute

```{r, echo=TRUE}
meth["experience_j"] <- "2lonly.mean"
meth["gender_ij"] <- "2l.pmm"
# re-impute
imp <- mice(
  dat, 
  method = meth, 
  predictorMatrix = pred,
  maxit = 1,
  printFlag = FALSE)
```

::: {.callout-tip}
## Succes!
:::

## Add iterations and evaluate

```{r, echo=TRUE}
imp <- mice.mids(imp, maxit = 9, printFlag = FALSE)
plot_trace(imp)
```

## Non-convergence?

```{r, echo=TRUE}
plot_pattern(dat, square = FALSE)
```

## Evaluate imputations

- Distribution of imputed values
- Plausibility of imputed values
- Variability between imputations

## Outcome variable: popularity (1)

```{r, echo=TRUE}
ggmice(imp, aes(.imp, popularity_ij)) + 
  geom_jitter(height = 0)
```


```{r, echo=TRUE}
range(mice::complete(imp)$popularity_ij)
```

## Outcome variable: popularity (2)

```{r, echo=TRUE}
ggmice(imp, aes(popularity_ij, group = .imp)) + 
  geom_density()
```

## Multivariate visualization

```{r}
ggmice(imp, aes(y = popularity_ij, x = extraversion_ij, group = cluster_id)) +
  geom_point(alpha = 0.1) +
  geom_smooth(color = "grey", method = "lm", se = FALSE, alpha = 0.1) +
  geom_smooth(aes(group = NULL), color = "black", method = "lm", se = FALSE, alpha = 0.1)
```

## Analyze imputed data

- Complete case analysis
- Sequential model building

## Single-level model

```{r, echo=TRUE}
cca <- lm(
  popularity_ij ~ 1, 
  data = dat
  )
tidy(cca)
```

```{r, echo=TRUE}
fit <- with(
  imp,
  lm(popularity_ij ~ 1, data = dat)
  ) |> 
  pool()
tidy(fit)
```

## Intercept-only model (1)
```{r}
# cca <- lmer(
#   popularity_ij ~ (1 | cluster_id), 
#   data = dat, 
#   REML = FALSE
#   )
# tidy(cca)
```

```{r, echo=TRUE}
fit <- with(
  imp,
  lmer(
    popularity_ij ~ (1 | cluster_id), 
    data = dat, 
    REML = FALSE)
  ) 
pool(fit) |> tidy()
```

## Intercept-only model (2)

```{r, echo=TRUE}
mitml::testEstimates(as.mitml.result(fit), extra.pars = TRUE)
```

## Model with explanatory variables
```{r}
# cca <- lmer(
#   popularity_ij ~ gender_ij + extraversion_ij + experience_j + (1 | cluster_id),
#   data = dat,
#   REML = FALSE
#   )
# tidy(cca)
```


```{r, echo=TRUE}
fit <- with(
  imp,
  lmer(
    popularity_ij ~ gender_ij + extraversion_ij + experience_j + (1 | cluster_id),
    data = dat, 
    REML = FALSE)
  ) 
pool(fit) |> tidy()
```

## Model with explanatory variables (2)

```{r, echo=TRUE}
mitml::testEstimates(as.mitml.result(fit), extra.pars = TRUE)
```

## Model with explanatory variables, extraversion slope random
```{r}
# fit <- lmer(
#   popularity_ij ~ gender_ij + extraversion_ij + experience_j + 
#     (1  + extraversion_ij | cluster_id), 
#   data = dat, 
#   REML = FALSE
#   )
# tidy(fit)
```

```{r, echo=TRUE}
fit <- with(
  imp,
  lmer(
    popularity_ij ~ gender_ij + extraversion_ij + experience_j + 
      (1  + extraversion_ij | cluster_id), 
    data = dat, 
    REML = FALSE)
  ) 
pool(fit) |> tidy()
```

## Model with explanatory variables, extraversion slope random (2)

```{r, echo=TRUE}
mitml::testEstimates(as.mitml.result(fit), extra.pars = TRUE)
```

## Model with with cross-level interaction
```{r}
# fit <- lmer(
#   popularity_ij ~ gender_ij + extraversion_ij + experience_j + 
#     extraversion_ij:experience_j + (1  + extraversion_ij | cluster_id), 
#   data = dat, 
#   REML = FALSE
#   )
# tidy(fit)
```

```{r, echo=TRUE}
fit <- with(
  imp,
  lmer(
    popularity_ij ~ gender_ij + extraversion_ij + experience_j + 
      extraversion_ij:experience_j + (1  + extraversion_ij | cluster_id),  
    data = dat, 
    REML = FALSE)
  ) 
pool(fit) |> tidy()
```

## Model with with cross-level interaction (2)

```{r, echo=TRUE}
mitml::testEstimates(as.mitml.result(fit), extra.pars = TRUE)
```

## Discussion

- Complete case analysis?
- Types of analysis models?
- Types of imputation model?
- Correcting for MNAR?
- Visualization of clusters?

## Thank you!

<!-- library(lme4) -->
<!-- # sleepstudy -->
<!-- library(nlme) -->
<!-- # MathAchieve -->
<!-- library(palmerpenguins) -->
<!-- penguins -->
